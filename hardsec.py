
# Self-decrypting loader
import sys as _s, base64 as _b, hashlib as _h, zlib as _z, marshal as _m

def _antidebug():
    if _s.gettrace(): raise SystemExit(0)
    for n in list(_s.modules):
        if n and ('pydev' in n or 'pdb' in n or 'bdb' in n): raise SystemExit(0)
_antidebug()

_B = ''
_H = '0B7WkSJaoh7ihPIuHl8c8eXrKwsozbW3'
_SHA = '7e343af3a34d144972639c5d1fad56d8a16f66cf4bb633b00585fe6cb0e5865c'

if _h.sha256(_B.encode('ascii')).hexdigest() != _SHA:
    raise SystemExit(0)

# Key matches pack_source: sha256(hint + b"::elite::")
_key = _h.sha256(_b.b64decode(_H) + b"::elite::").digest()

data = _b.b64decode(_B)
data = bytes(x ^ _key[i % len(_key)] for i, x in enumerate(data))
data = _z.decompress(data)
co = _m.loads(data)
g = {'__name__':'__main__','__file__':__file__}
exec(co, g, g)
